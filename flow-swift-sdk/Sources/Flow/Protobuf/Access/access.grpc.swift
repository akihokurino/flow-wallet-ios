//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: flow/access/access.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf

/// AccessAPI is the public-facing API provided by access nodes.
///
/// Usage: instantiate `Flow_Access_AccessAPIClient`, then call methods of this protocol to make API calls.
public protocol Flow_Access_AccessAPIClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Flow_Access_AccessAPIClientInterceptorFactoryProtocol? { get }

    func ping(
        _ request: Flow_Access_PingRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_PingRequest, Flow_Access_PingResponse>

    func getLatestBlockHeader(
        _ request: Flow_Access_GetLatestBlockHeaderRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetLatestBlockHeaderRequest, Flow_Access_BlockHeaderResponse>

    func getBlockHeaderByID(
        _ request: Flow_Access_GetBlockHeaderByIDRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetBlockHeaderByIDRequest, Flow_Access_BlockHeaderResponse>

    func getBlockHeaderByHeight(
        _ request: Flow_Access_GetBlockHeaderByHeightRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetBlockHeaderByHeightRequest, Flow_Access_BlockHeaderResponse>

    func getLatestBlock(
        _ request: Flow_Access_GetLatestBlockRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetLatestBlockRequest, Flow_Access_BlockResponse>

    func getBlockByID(
        _ request: Flow_Access_GetBlockByIDRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetBlockByIDRequest, Flow_Access_BlockResponse>

    func getBlockByHeight(
        _ request: Flow_Access_GetBlockByHeightRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetBlockByHeightRequest, Flow_Access_BlockResponse>

    func getCollectionByID(
        _ request: Flow_Access_GetCollectionByIDRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetCollectionByIDRequest, Flow_Access_CollectionResponse>

    func sendTransaction(
        _ request: Flow_Access_SendTransactionRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_SendTransactionRequest, Flow_Access_SendTransactionResponse>

    func getTransaction(
        _ request: Flow_Access_GetTransactionRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResponse>

    func getTransactionResult(
        _ request: Flow_Access_GetTransactionRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResultResponse>

    func getAccount(
        _ request: Flow_Access_GetAccountRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetAccountRequest, Flow_Access_GetAccountResponse>

    func getAccountAtLatestBlock(
        _ request: Flow_Access_GetAccountAtLatestBlockRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetAccountAtLatestBlockRequest, Flow_Access_AccountResponse>

    func getAccountAtBlockHeight(
        _ request: Flow_Access_GetAccountAtBlockHeightRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetAccountAtBlockHeightRequest, Flow_Access_AccountResponse>

    func executeScriptAtLatestBlock(
        _ request: Flow_Access_ExecuteScriptAtLatestBlockRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_ExecuteScriptAtLatestBlockRequest, Flow_Access_ExecuteScriptResponse>

    func executeScriptAtBlockID(
        _ request: Flow_Access_ExecuteScriptAtBlockIDRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_ExecuteScriptAtBlockIDRequest, Flow_Access_ExecuteScriptResponse>

    func executeScriptAtBlockHeight(
        _ request: Flow_Access_ExecuteScriptAtBlockHeightRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_ExecuteScriptAtBlockHeightRequest, Flow_Access_ExecuteScriptResponse>

    func getEventsForHeightRange(
        _ request: Flow_Access_GetEventsForHeightRangeRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetEventsForHeightRangeRequest, Flow_Access_EventsResponse>

    func getEventsForBlockIDs(
        _ request: Flow_Access_GetEventsForBlockIDsRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetEventsForBlockIDsRequest, Flow_Access_EventsResponse>

    func getNetworkParameters(
        _ request: Flow_Access_GetNetworkParametersRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetNetworkParametersRequest, Flow_Access_GetNetworkParametersResponse>

    func getLatestProtocolStateSnapshot(
        _ request: Flow_Access_GetLatestProtocolStateSnapshotRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Flow_Access_GetLatestProtocolStateSnapshotRequest, Flow_Access_ProtocolStateSnapshotResponse>
}

extension Flow_Access_AccessAPIClientProtocol {
    public var serviceName: String {
        return "flow.access.AccessAPI"
    }

    /// Ping is used to check if the access node is alive and healthy.
    ///
    /// - Parameters:
    ///   - request: Request to send to Ping.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func ping(
        _ request: Flow_Access_PingRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_PingRequest, Flow_Access_PingResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/Ping",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makePingInterceptors() ?? []
        )
    }

    /// GetLatestBlockHeader gets the latest sealed or unsealed block header.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetLatestBlockHeader.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getLatestBlockHeader(
        _ request: Flow_Access_GetLatestBlockHeaderRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetLatestBlockHeaderRequest, Flow_Access_BlockHeaderResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetLatestBlockHeader",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetLatestBlockHeaderInterceptors() ?? []
        )
    }

    /// GetBlockHeaderByID gets a block header by ID.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetBlockHeaderByID.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getBlockHeaderByID(
        _ request: Flow_Access_GetBlockHeaderByIDRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetBlockHeaderByIDRequest, Flow_Access_BlockHeaderResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetBlockHeaderByID",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetBlockHeaderByIDInterceptors() ?? []
        )
    }

    /// GetBlockHeaderByHeight gets a block header by height.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetBlockHeaderByHeight.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getBlockHeaderByHeight(
        _ request: Flow_Access_GetBlockHeaderByHeightRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetBlockHeaderByHeightRequest, Flow_Access_BlockHeaderResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetBlockHeaderByHeight",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetBlockHeaderByHeightInterceptors() ?? []
        )
    }

    /// GetLatestBlock gets the full payload of the latest sealed or unsealed
    /// block.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetLatestBlock.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getLatestBlock(
        _ request: Flow_Access_GetLatestBlockRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetLatestBlockRequest, Flow_Access_BlockResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetLatestBlock",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetLatestBlockInterceptors() ?? []
        )
    }

    /// GetBlockByID gets a full block by ID.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetBlockByID.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getBlockByID(
        _ request: Flow_Access_GetBlockByIDRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetBlockByIDRequest, Flow_Access_BlockResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetBlockByID",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetBlockByIDInterceptors() ?? []
        )
    }

    /// GetBlockByHeight gets a full block by height.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetBlockByHeight.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getBlockByHeight(
        _ request: Flow_Access_GetBlockByHeightRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetBlockByHeightRequest, Flow_Access_BlockResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetBlockByHeight",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetBlockByHeightInterceptors() ?? []
        )
    }

    /// GetCollectionByID gets a collection by ID.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetCollectionByID.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getCollectionByID(
        _ request: Flow_Access_GetCollectionByIDRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetCollectionByIDRequest, Flow_Access_CollectionResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetCollectionByID",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetCollectionByIDInterceptors() ?? []
        )
    }

    /// SendTransaction submits a transaction to the network.
    ///
    /// - Parameters:
    ///   - request: Request to send to SendTransaction.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func sendTransaction(
        _ request: Flow_Access_SendTransactionRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_SendTransactionRequest, Flow_Access_SendTransactionResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/SendTransaction",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSendTransactionInterceptors() ?? []
        )
    }

    /// GetTransaction gets a transaction by ID.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetTransaction.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getTransaction(
        _ request: Flow_Access_GetTransactionRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetTransaction",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetTransactionInterceptors() ?? []
        )
    }

    /// GetTransactionResult gets the result of a transaction.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetTransactionResult.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getTransactionResult(
        _ request: Flow_Access_GetTransactionRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResultResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetTransactionResult",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetTransactionResultInterceptors() ?? []
        )
    }

    /// GetAccount is an alias for GetAccountAtLatestBlock.
    ///
    /// Warning: this function is deprecated. It behaves identically to
    /// GetAccountAtLatestBlock and will be removed in a future version.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetAccount.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getAccount(
        _ request: Flow_Access_GetAccountRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetAccountRequest, Flow_Access_GetAccountResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetAccount",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetAccountInterceptors() ?? []
        )
    }

    /// GetAccountAtLatestBlock gets an account by address from the latest sealed
    /// execution state.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetAccountAtLatestBlock.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getAccountAtLatestBlock(
        _ request: Flow_Access_GetAccountAtLatestBlockRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetAccountAtLatestBlockRequest, Flow_Access_AccountResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetAccountAtLatestBlock",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetAccountAtLatestBlockInterceptors() ?? []
        )
    }

    /// GetAccountAtBlockHeight gets an account by address at the given block
    /// height
    ///
    /// - Parameters:
    ///   - request: Request to send to GetAccountAtBlockHeight.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getAccountAtBlockHeight(
        _ request: Flow_Access_GetAccountAtBlockHeightRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetAccountAtBlockHeightRequest, Flow_Access_AccountResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetAccountAtBlockHeight",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetAccountAtBlockHeightInterceptors() ?? []
        )
    }

    /// ExecuteScriptAtLatestBlock executes a read-only Cadence script against the
    /// latest sealed execution state.
    ///
    /// - Parameters:
    ///   - request: Request to send to ExecuteScriptAtLatestBlock.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func executeScriptAtLatestBlock(
        _ request: Flow_Access_ExecuteScriptAtLatestBlockRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_ExecuteScriptAtLatestBlockRequest, Flow_Access_ExecuteScriptResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/ExecuteScriptAtLatestBlock",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeExecuteScriptAtLatestBlockInterceptors() ?? []
        )
    }

    /// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
    /// execution state at the block with the given ID.
    ///
    /// - Parameters:
    ///   - request: Request to send to ExecuteScriptAtBlockID.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func executeScriptAtBlockID(
        _ request: Flow_Access_ExecuteScriptAtBlockIDRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_ExecuteScriptAtBlockIDRequest, Flow_Access_ExecuteScriptResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/ExecuteScriptAtBlockID",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeExecuteScriptAtBlockIDInterceptors() ?? []
        )
    }

    /// ExecuteScriptAtBlockHeight executes a ready-only Cadence script against the
    /// execution state at the given block height.
    ///
    /// - Parameters:
    ///   - request: Request to send to ExecuteScriptAtBlockHeight.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func executeScriptAtBlockHeight(
        _ request: Flow_Access_ExecuteScriptAtBlockHeightRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_ExecuteScriptAtBlockHeightRequest, Flow_Access_ExecuteScriptResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/ExecuteScriptAtBlockHeight",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeExecuteScriptAtBlockHeightInterceptors() ?? []
        )
    }

    /// GetEventsForHeightRange retrieves events emitted within the specified block
    /// range.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetEventsForHeightRange.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getEventsForHeightRange(
        _ request: Flow_Access_GetEventsForHeightRangeRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetEventsForHeightRangeRequest, Flow_Access_EventsResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetEventsForHeightRange",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetEventsForHeightRangeInterceptors() ?? []
        )
    }

    /// GetEventsForBlockIDs retrieves events for the specified block IDs and event
    /// type.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetEventsForBlockIDs.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getEventsForBlockIDs(
        _ request: Flow_Access_GetEventsForBlockIDsRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetEventsForBlockIDsRequest, Flow_Access_EventsResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetEventsForBlockIDs",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetEventsForBlockIDsInterceptors() ?? []
        )
    }

    /// GetNetworkParameters retrieves the Flow network details
    ///
    /// - Parameters:
    ///   - request: Request to send to GetNetworkParameters.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getNetworkParameters(
        _ request: Flow_Access_GetNetworkParametersRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetNetworkParametersRequest, Flow_Access_GetNetworkParametersResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetNetworkParameters",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetNetworkParametersInterceptors() ?? []
        )
    }

    /// GetLatestProtocolStateSnapshot retrieves the latest sealed protocol state
    /// snapshot. Used by Flow nodes joining the network to bootstrap a
    /// space-efficient local state.
    ///
    /// - Parameters:
    ///   - request: Request to send to GetLatestProtocolStateSnapshot.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    public func getLatestProtocolStateSnapshot(
        _ request: Flow_Access_GetLatestProtocolStateSnapshotRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Flow_Access_GetLatestProtocolStateSnapshotRequest, Flow_Access_ProtocolStateSnapshotResponse> {
        return makeUnaryCall(
            path: "/flow.access.AccessAPI/GetLatestProtocolStateSnapshot",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeGetLatestProtocolStateSnapshotInterceptors() ?? []
        )
    }
}

public protocol Flow_Access_AccessAPIClientInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when invoking 'ping'.
    func makePingInterceptors() -> [ClientInterceptor<Flow_Access_PingRequest, Flow_Access_PingResponse>]

    /// - Returns: Interceptors to use when invoking 'getLatestBlockHeader'.
    func makeGetLatestBlockHeaderInterceptors() -> [ClientInterceptor<Flow_Access_GetLatestBlockHeaderRequest, Flow_Access_BlockHeaderResponse>]

    /// - Returns: Interceptors to use when invoking 'getBlockHeaderByID'.
    func makeGetBlockHeaderByIDInterceptors() -> [ClientInterceptor<Flow_Access_GetBlockHeaderByIDRequest, Flow_Access_BlockHeaderResponse>]

    /// - Returns: Interceptors to use when invoking 'getBlockHeaderByHeight'.
    func makeGetBlockHeaderByHeightInterceptors() -> [ClientInterceptor<Flow_Access_GetBlockHeaderByHeightRequest, Flow_Access_BlockHeaderResponse>]

    /// - Returns: Interceptors to use when invoking 'getLatestBlock'.
    func makeGetLatestBlockInterceptors() -> [ClientInterceptor<Flow_Access_GetLatestBlockRequest, Flow_Access_BlockResponse>]

    /// - Returns: Interceptors to use when invoking 'getBlockByID'.
    func makeGetBlockByIDInterceptors() -> [ClientInterceptor<Flow_Access_GetBlockByIDRequest, Flow_Access_BlockResponse>]

    /// - Returns: Interceptors to use when invoking 'getBlockByHeight'.
    func makeGetBlockByHeightInterceptors() -> [ClientInterceptor<Flow_Access_GetBlockByHeightRequest, Flow_Access_BlockResponse>]

    /// - Returns: Interceptors to use when invoking 'getCollectionByID'.
    func makeGetCollectionByIDInterceptors() -> [ClientInterceptor<Flow_Access_GetCollectionByIDRequest, Flow_Access_CollectionResponse>]

    /// - Returns: Interceptors to use when invoking 'sendTransaction'.
    func makeSendTransactionInterceptors() -> [ClientInterceptor<Flow_Access_SendTransactionRequest, Flow_Access_SendTransactionResponse>]

    /// - Returns: Interceptors to use when invoking 'getTransaction'.
    func makeGetTransactionInterceptors() -> [ClientInterceptor<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResponse>]

    /// - Returns: Interceptors to use when invoking 'getTransactionResult'.
    func makeGetTransactionResultInterceptors() -> [ClientInterceptor<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResultResponse>]

    /// - Returns: Interceptors to use when invoking 'getAccount'.
    func makeGetAccountInterceptors() -> [ClientInterceptor<Flow_Access_GetAccountRequest, Flow_Access_GetAccountResponse>]

    /// - Returns: Interceptors to use when invoking 'getAccountAtLatestBlock'.
    func makeGetAccountAtLatestBlockInterceptors() -> [ClientInterceptor<Flow_Access_GetAccountAtLatestBlockRequest, Flow_Access_AccountResponse>]

    /// - Returns: Interceptors to use when invoking 'getAccountAtBlockHeight'.
    func makeGetAccountAtBlockHeightInterceptors() -> [ClientInterceptor<Flow_Access_GetAccountAtBlockHeightRequest, Flow_Access_AccountResponse>]

    /// - Returns: Interceptors to use when invoking 'executeScriptAtLatestBlock'.
    func makeExecuteScriptAtLatestBlockInterceptors() -> [ClientInterceptor<Flow_Access_ExecuteScriptAtLatestBlockRequest, Flow_Access_ExecuteScriptResponse>]

    /// - Returns: Interceptors to use when invoking 'executeScriptAtBlockID'.
    func makeExecuteScriptAtBlockIDInterceptors() -> [ClientInterceptor<Flow_Access_ExecuteScriptAtBlockIDRequest, Flow_Access_ExecuteScriptResponse>]

    /// - Returns: Interceptors to use when invoking 'executeScriptAtBlockHeight'.
    func makeExecuteScriptAtBlockHeightInterceptors() -> [ClientInterceptor<Flow_Access_ExecuteScriptAtBlockHeightRequest, Flow_Access_ExecuteScriptResponse>]

    /// - Returns: Interceptors to use when invoking 'getEventsForHeightRange'.
    func makeGetEventsForHeightRangeInterceptors() -> [ClientInterceptor<Flow_Access_GetEventsForHeightRangeRequest, Flow_Access_EventsResponse>]

    /// - Returns: Interceptors to use when invoking 'getEventsForBlockIDs'.
    func makeGetEventsForBlockIDsInterceptors() -> [ClientInterceptor<Flow_Access_GetEventsForBlockIDsRequest, Flow_Access_EventsResponse>]

    /// - Returns: Interceptors to use when invoking 'getNetworkParameters'.
    func makeGetNetworkParametersInterceptors() -> [ClientInterceptor<Flow_Access_GetNetworkParametersRequest, Flow_Access_GetNetworkParametersResponse>]

    /// - Returns: Interceptors to use when invoking 'getLatestProtocolStateSnapshot'.
    func makeGetLatestProtocolStateSnapshotInterceptors() -> [ClientInterceptor<Flow_Access_GetLatestProtocolStateSnapshotRequest, Flow_Access_ProtocolStateSnapshotResponse>]
}

public final class Flow_Access_AccessAPIClient: Flow_Access_AccessAPIClientProtocol {
    public let channel: GRPCChannel
    public var defaultCallOptions: CallOptions
    public var interceptors: Flow_Access_AccessAPIClientInterceptorFactoryProtocol?

    /// Creates a client for the flow.access.AccessAPI service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    public init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Flow_Access_AccessAPIClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}

/// AccessAPI is the public-facing API provided by access nodes.
///
/// To build a server, implement a class that conforms to this protocol.
public protocol Flow_Access_AccessAPIProvider: CallHandlerProvider {
    var interceptors: Flow_Access_AccessAPIServerInterceptorFactoryProtocol? { get }

    /// Ping is used to check if the access node is alive and healthy.
    func ping(request: Flow_Access_PingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_PingResponse>

    /// GetLatestBlockHeader gets the latest sealed or unsealed block header.
    func getLatestBlockHeader(request: Flow_Access_GetLatestBlockHeaderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_BlockHeaderResponse>

    /// GetBlockHeaderByID gets a block header by ID.
    func getBlockHeaderByID(request: Flow_Access_GetBlockHeaderByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_BlockHeaderResponse>

    /// GetBlockHeaderByHeight gets a block header by height.
    func getBlockHeaderByHeight(request: Flow_Access_GetBlockHeaderByHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_BlockHeaderResponse>

    /// GetLatestBlock gets the full payload of the latest sealed or unsealed
    /// block.
    func getLatestBlock(request: Flow_Access_GetLatestBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_BlockResponse>

    /// GetBlockByID gets a full block by ID.
    func getBlockByID(request: Flow_Access_GetBlockByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_BlockResponse>

    /// GetBlockByHeight gets a full block by height.
    func getBlockByHeight(request: Flow_Access_GetBlockByHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_BlockResponse>

    /// GetCollectionByID gets a collection by ID.
    func getCollectionByID(request: Flow_Access_GetCollectionByIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_CollectionResponse>

    /// SendTransaction submits a transaction to the network.
    func sendTransaction(request: Flow_Access_SendTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_SendTransactionResponse>

    /// GetTransaction gets a transaction by ID.
    func getTransaction(request: Flow_Access_GetTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_TransactionResponse>

    /// GetTransactionResult gets the result of a transaction.
    func getTransactionResult(request: Flow_Access_GetTransactionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_TransactionResultResponse>

    /// GetAccount is an alias for GetAccountAtLatestBlock.
    ///
    /// Warning: this function is deprecated. It behaves identically to
    /// GetAccountAtLatestBlock and will be removed in a future version.
    func getAccount(request: Flow_Access_GetAccountRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_GetAccountResponse>

    /// GetAccountAtLatestBlock gets an account by address from the latest sealed
    /// execution state.
    func getAccountAtLatestBlock(request: Flow_Access_GetAccountAtLatestBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_AccountResponse>

    /// GetAccountAtBlockHeight gets an account by address at the given block
    /// height
    func getAccountAtBlockHeight(request: Flow_Access_GetAccountAtBlockHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_AccountResponse>

    /// ExecuteScriptAtLatestBlock executes a read-only Cadence script against the
    /// latest sealed execution state.
    func executeScriptAtLatestBlock(request: Flow_Access_ExecuteScriptAtLatestBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_ExecuteScriptResponse>

    /// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
    /// execution state at the block with the given ID.
    func executeScriptAtBlockID(request: Flow_Access_ExecuteScriptAtBlockIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_ExecuteScriptResponse>

    /// ExecuteScriptAtBlockHeight executes a ready-only Cadence script against the
    /// execution state at the given block height.
    func executeScriptAtBlockHeight(request: Flow_Access_ExecuteScriptAtBlockHeightRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_ExecuteScriptResponse>

    /// GetEventsForHeightRange retrieves events emitted within the specified block
    /// range.
    func getEventsForHeightRange(request: Flow_Access_GetEventsForHeightRangeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_EventsResponse>

    /// GetEventsForBlockIDs retrieves events for the specified block IDs and event
    /// type.
    func getEventsForBlockIDs(request: Flow_Access_GetEventsForBlockIDsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_EventsResponse>

    /// GetNetworkParameters retrieves the Flow network details
    func getNetworkParameters(request: Flow_Access_GetNetworkParametersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_GetNetworkParametersResponse>

    /// GetLatestProtocolStateSnapshot retrieves the latest sealed protocol state
    /// snapshot. Used by Flow nodes joining the network to bootstrap a
    /// space-efficient local state.
    func getLatestProtocolStateSnapshot(request: Flow_Access_GetLatestProtocolStateSnapshotRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Flow_Access_ProtocolStateSnapshotResponse>
}

extension Flow_Access_AccessAPIProvider {
    public var serviceName: Substring { return "flow.access.AccessAPI" }

    /// Determines, calls and returns the appropriate request handler, depending on the request's method.
    /// Returns nil for methods not handled by this service.
    public func handle(
        method name: Substring,
        context: CallHandlerContext
    ) -> GRPCServerHandlerProtocol? {
        switch name {
        case "Ping":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_PingRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_PingResponse>(),
                interceptors: interceptors?.makePingInterceptors() ?? [],
                userFunction: ping(request:context:)
            )

        case "GetLatestBlockHeader":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetLatestBlockHeaderRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_BlockHeaderResponse>(),
                interceptors: interceptors?.makeGetLatestBlockHeaderInterceptors() ?? [],
                userFunction: getLatestBlockHeader(request:context:)
            )

        case "GetBlockHeaderByID":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetBlockHeaderByIDRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_BlockHeaderResponse>(),
                interceptors: interceptors?.makeGetBlockHeaderByIDInterceptors() ?? [],
                userFunction: getBlockHeaderByID(request:context:)
            )

        case "GetBlockHeaderByHeight":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetBlockHeaderByHeightRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_BlockHeaderResponse>(),
                interceptors: interceptors?.makeGetBlockHeaderByHeightInterceptors() ?? [],
                userFunction: getBlockHeaderByHeight(request:context:)
            )

        case "GetLatestBlock":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetLatestBlockRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_BlockResponse>(),
                interceptors: interceptors?.makeGetLatestBlockInterceptors() ?? [],
                userFunction: getLatestBlock(request:context:)
            )

        case "GetBlockByID":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetBlockByIDRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_BlockResponse>(),
                interceptors: interceptors?.makeGetBlockByIDInterceptors() ?? [],
                userFunction: getBlockByID(request:context:)
            )

        case "GetBlockByHeight":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetBlockByHeightRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_BlockResponse>(),
                interceptors: interceptors?.makeGetBlockByHeightInterceptors() ?? [],
                userFunction: getBlockByHeight(request:context:)
            )

        case "GetCollectionByID":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetCollectionByIDRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_CollectionResponse>(),
                interceptors: interceptors?.makeGetCollectionByIDInterceptors() ?? [],
                userFunction: getCollectionByID(request:context:)
            )

        case "SendTransaction":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_SendTransactionRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_SendTransactionResponse>(),
                interceptors: interceptors?.makeSendTransactionInterceptors() ?? [],
                userFunction: sendTransaction(request:context:)
            )

        case "GetTransaction":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetTransactionRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_TransactionResponse>(),
                interceptors: interceptors?.makeGetTransactionInterceptors() ?? [],
                userFunction: getTransaction(request:context:)
            )

        case "GetTransactionResult":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetTransactionRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_TransactionResultResponse>(),
                interceptors: interceptors?.makeGetTransactionResultInterceptors() ?? [],
                userFunction: getTransactionResult(request:context:)
            )

        case "GetAccount":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetAccountRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_GetAccountResponse>(),
                interceptors: interceptors?.makeGetAccountInterceptors() ?? [],
                userFunction: getAccount(request:context:)
            )

        case "GetAccountAtLatestBlock":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetAccountAtLatestBlockRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_AccountResponse>(),
                interceptors: interceptors?.makeGetAccountAtLatestBlockInterceptors() ?? [],
                userFunction: getAccountAtLatestBlock(request:context:)
            )

        case "GetAccountAtBlockHeight":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetAccountAtBlockHeightRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_AccountResponse>(),
                interceptors: interceptors?.makeGetAccountAtBlockHeightInterceptors() ?? [],
                userFunction: getAccountAtBlockHeight(request:context:)
            )

        case "ExecuteScriptAtLatestBlock":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_ExecuteScriptAtLatestBlockRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_ExecuteScriptResponse>(),
                interceptors: interceptors?.makeExecuteScriptAtLatestBlockInterceptors() ?? [],
                userFunction: executeScriptAtLatestBlock(request:context:)
            )

        case "ExecuteScriptAtBlockID":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_ExecuteScriptAtBlockIDRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_ExecuteScriptResponse>(),
                interceptors: interceptors?.makeExecuteScriptAtBlockIDInterceptors() ?? [],
                userFunction: executeScriptAtBlockID(request:context:)
            )

        case "ExecuteScriptAtBlockHeight":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_ExecuteScriptAtBlockHeightRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_ExecuteScriptResponse>(),
                interceptors: interceptors?.makeExecuteScriptAtBlockHeightInterceptors() ?? [],
                userFunction: executeScriptAtBlockHeight(request:context:)
            )

        case "GetEventsForHeightRange":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetEventsForHeightRangeRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_EventsResponse>(),
                interceptors: interceptors?.makeGetEventsForHeightRangeInterceptors() ?? [],
                userFunction: getEventsForHeightRange(request:context:)
            )

        case "GetEventsForBlockIDs":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetEventsForBlockIDsRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_EventsResponse>(),
                interceptors: interceptors?.makeGetEventsForBlockIDsInterceptors() ?? [],
                userFunction: getEventsForBlockIDs(request:context:)
            )

        case "GetNetworkParameters":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetNetworkParametersRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_GetNetworkParametersResponse>(),
                interceptors: interceptors?.makeGetNetworkParametersInterceptors() ?? [],
                userFunction: getNetworkParameters(request:context:)
            )

        case "GetLatestProtocolStateSnapshot":
            return UnaryServerHandler(
                context: context,
                requestDeserializer: ProtobufDeserializer<Flow_Access_GetLatestProtocolStateSnapshotRequest>(),
                responseSerializer: ProtobufSerializer<Flow_Access_ProtocolStateSnapshotResponse>(),
                interceptors: interceptors?.makeGetLatestProtocolStateSnapshotInterceptors() ?? [],
                userFunction: getLatestProtocolStateSnapshot(request:context:)
            )

        default:
            return nil
        }
    }
}

public protocol Flow_Access_AccessAPIServerInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when handling 'ping'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makePingInterceptors() -> [ServerInterceptor<Flow_Access_PingRequest, Flow_Access_PingResponse>]

    /// - Returns: Interceptors to use when handling 'getLatestBlockHeader'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetLatestBlockHeaderInterceptors() -> [ServerInterceptor<Flow_Access_GetLatestBlockHeaderRequest, Flow_Access_BlockHeaderResponse>]

    /// - Returns: Interceptors to use when handling 'getBlockHeaderByID'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetBlockHeaderByIDInterceptors() -> [ServerInterceptor<Flow_Access_GetBlockHeaderByIDRequest, Flow_Access_BlockHeaderResponse>]

    /// - Returns: Interceptors to use when handling 'getBlockHeaderByHeight'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetBlockHeaderByHeightInterceptors() -> [ServerInterceptor<Flow_Access_GetBlockHeaderByHeightRequest, Flow_Access_BlockHeaderResponse>]

    /// - Returns: Interceptors to use when handling 'getLatestBlock'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetLatestBlockInterceptors() -> [ServerInterceptor<Flow_Access_GetLatestBlockRequest, Flow_Access_BlockResponse>]

    /// - Returns: Interceptors to use when handling 'getBlockByID'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetBlockByIDInterceptors() -> [ServerInterceptor<Flow_Access_GetBlockByIDRequest, Flow_Access_BlockResponse>]

    /// - Returns: Interceptors to use when handling 'getBlockByHeight'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetBlockByHeightInterceptors() -> [ServerInterceptor<Flow_Access_GetBlockByHeightRequest, Flow_Access_BlockResponse>]

    /// - Returns: Interceptors to use when handling 'getCollectionByID'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetCollectionByIDInterceptors() -> [ServerInterceptor<Flow_Access_GetCollectionByIDRequest, Flow_Access_CollectionResponse>]

    /// - Returns: Interceptors to use when handling 'sendTransaction'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeSendTransactionInterceptors() -> [ServerInterceptor<Flow_Access_SendTransactionRequest, Flow_Access_SendTransactionResponse>]

    /// - Returns: Interceptors to use when handling 'getTransaction'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetTransactionInterceptors() -> [ServerInterceptor<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResponse>]

    /// - Returns: Interceptors to use when handling 'getTransactionResult'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetTransactionResultInterceptors() -> [ServerInterceptor<Flow_Access_GetTransactionRequest, Flow_Access_TransactionResultResponse>]

    /// - Returns: Interceptors to use when handling 'getAccount'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetAccountInterceptors() -> [ServerInterceptor<Flow_Access_GetAccountRequest, Flow_Access_GetAccountResponse>]

    /// - Returns: Interceptors to use when handling 'getAccountAtLatestBlock'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetAccountAtLatestBlockInterceptors() -> [ServerInterceptor<Flow_Access_GetAccountAtLatestBlockRequest, Flow_Access_AccountResponse>]

    /// - Returns: Interceptors to use when handling 'getAccountAtBlockHeight'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetAccountAtBlockHeightInterceptors() -> [ServerInterceptor<Flow_Access_GetAccountAtBlockHeightRequest, Flow_Access_AccountResponse>]

    /// - Returns: Interceptors to use when handling 'executeScriptAtLatestBlock'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeExecuteScriptAtLatestBlockInterceptors() -> [ServerInterceptor<Flow_Access_ExecuteScriptAtLatestBlockRequest, Flow_Access_ExecuteScriptResponse>]

    /// - Returns: Interceptors to use when handling 'executeScriptAtBlockID'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeExecuteScriptAtBlockIDInterceptors() -> [ServerInterceptor<Flow_Access_ExecuteScriptAtBlockIDRequest, Flow_Access_ExecuteScriptResponse>]

    /// - Returns: Interceptors to use when handling 'executeScriptAtBlockHeight'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeExecuteScriptAtBlockHeightInterceptors() -> [ServerInterceptor<Flow_Access_ExecuteScriptAtBlockHeightRequest, Flow_Access_ExecuteScriptResponse>]

    /// - Returns: Interceptors to use when handling 'getEventsForHeightRange'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetEventsForHeightRangeInterceptors() -> [ServerInterceptor<Flow_Access_GetEventsForHeightRangeRequest, Flow_Access_EventsResponse>]

    /// - Returns: Interceptors to use when handling 'getEventsForBlockIDs'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetEventsForBlockIDsInterceptors() -> [ServerInterceptor<Flow_Access_GetEventsForBlockIDsRequest, Flow_Access_EventsResponse>]

    /// - Returns: Interceptors to use when handling 'getNetworkParameters'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetNetworkParametersInterceptors() -> [ServerInterceptor<Flow_Access_GetNetworkParametersRequest, Flow_Access_GetNetworkParametersResponse>]

    /// - Returns: Interceptors to use when handling 'getLatestProtocolStateSnapshot'.
    ///   Defaults to calling `self.makeInterceptors()`.
    func makeGetLatestProtocolStateSnapshotInterceptors() -> [ServerInterceptor<Flow_Access_GetLatestProtocolStateSnapshotRequest, Flow_Access_ProtocolStateSnapshotResponse>]
}
